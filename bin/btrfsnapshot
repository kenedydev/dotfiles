#!/usr/bin/env bash
set -euo pipefail

if mountpoint -q /mnt; then
  echo "btrfsnapshot: /mnt is already mounted â€” aborting" >&2
  exit 1
fi

CONF_FILE="/etc/btrfsnapshot.conf"

[[ -f "$CONF_FILE" ]] || {
  cat >"$CONF_FILE" <<'EOF'
# retention policy
MAX_RECENT_SNAPS=15 # maximum number of recent snapshots to keep
MAX_SNAPS_DAILY=3   # maximum number of snapshots to keep per day
MAX_SNAPS_WEEKLY=2  # maximum number of snapshots to keep per week

RECENT_RETENTION=7  # retention period (in days) for recent snapshots
DAILY_RETENTION=14  # retention period (in days) for daily snapshots
WEEKLY_RETENTION=60 # retention period (in days) for weekly snapshots

# configuration (uncomment and set the appropriate values)
# ROOT_UUID=<root mount point UUID>
# BOOT_UUID=<boot mount point UUID>
# ROOT_SUBVOL=<root subvolume name>
# BOOT_SUBVOL=<boot subvolume name>
# SNAP_SUBVOL=<subvolume to save snapshots>
# EFI_SOURCE=<EFI files source>
# EFI_BACKUP_DIR=<EFI backup directory>
EOF
  echo "btrfsnapshot: no configuration file found. configuration file created at $CONF_FILE" >&2
  exit 1
}

# shellcheck source=/etc/btrfsnapshot.conf
source "$CONF_FILE"

required_vars=(
  ROOT_UUID BOOT_UUID ROOT_SUBVOL BOOT_SUBVOL SNAP_SUBVOL EFI_SOURCE EFI_BACKUP_DIR
  MAX_RECENT_SNAPS MAX_SNAPS_DAILY MAX_SNAPS_WEEKLY RECENT_RETENTION DAILY_RETENTION WEEKLY_RETENTION
)

for var in "${required_vars[@]}"; do
  [[ -n "${!var:-}" ]] || {
    echo "btrfsnapshot: required variable '$var' is not set. please configure it in $CONF_FILE" >&2
    exit 1
  }
done

SNAP_NAME="snapshot"

print_help() {
  cat <<EOF
usage: btrfsnapshot [-n name] [-h]

  -n name   Set a name for the snapshot (default: snapshot)
  -h        Display this help message
EOF
}

while getopts "n:h" opt; do
  case "${opt}" in
  n) SNAP_NAME="${OPTARG}" ;;
  h)
    print_help
    exit 0
    ;;
  :)
    echo "btrfsnapshot: option -${OPTARG} requires an argument." >&2
    print_help
    exit 1
    ;;
  \?)
    echo "btrfsnapshot: invalid option -${OPTARG}" >&2
    print_help
    exit 1
    ;;
  esac
done

[[ "$SNAP_NAME" =~ ^[A-Za-z0-9]+(_[A-Za-z0-9]+)*$ ]] || {
  echo "btrfsnapshot: invalid name" >&2
  exit 1
}

DATE_EPOCH=$(date +%s)
DATE_NOW=$(date -d "@${DATE_EPOCH}" '+%Y%m%d_%H%M%S')
ROOT_MNT="/mnt/btrfsnapshot_root_${SNAP_NAME}_${DATE_EPOCH}"
BOOT_MNT="/mnt/btrfsnapshot_boot_${SNAP_NAME}_${DATE_EPOCH}"

# cleanup handler
cleanup() {
  umount "${ROOT_MNT}" &>/dev/null || true
  umount "${BOOT_MNT}" &>/dev/null || true
  rmdir "${ROOT_MNT}" &>/dev/null || true
  rmdir "${BOOT_MNT}" &>/dev/null || true
}
trap cleanup EXIT

prune_snapshots() {
  local base_dir prefix now
  base_dir="$1"
  prefix="$2"
  now=$(date +%s)

  mapfile -t snaps < <(find "${base_dir}/${SNAP_SUBVOL}" -maxdepth 1 -type d -name "${prefix}_*" -printf '%f\n' | sort -r)

  local snap_epoch age_days day_key week_key
  local recent_count daily_count weekly_count
  declare -A keep daily_keep weekly_keep
  recent_count=0

  for snap in "${snaps[@]}"; do
    snap_epoch="${snap##*_}"
    age_days=$(((now - snap_epoch) / 86400))

    # keep the most recent snapshots (global policy)
    if ((age_days < RECENT_RETENTION)); then
      if ((recent_count < MAX_RECENT_SNAPS)); then
        keep[$snap]=1
        recent_count=$((recent_count + 1))
      fi
    fi

    # daily retention: allow up to MAX_SNAPS_DAILY per day (retention period in days)
    if ((age_days < DAILY_RETENTION)); then
      day_key=$(date -d "@${snap_epoch}" +%Y%m%d)
      daily_count=${daily_keep[$day_key]:-0}
      if ((daily_count < MAX_SNAPS_DAILY)); then
        keep[$snap]=1
        daily_keep[$day_key]=$((daily_count + 1))
      fi
    fi

    # weekly retention: allow up to MAX_SNAPS_WEEKLY per week (retention period in days)
    if ((age_days < WEEKLY_RETENTION)); then
      week_key=$(date -d "@${snap_epoch}" +%G%V)
      weekly_count=${weekly_keep[$week_key]:-0}
      if ((weekly_count < MAX_SNAPS_WEEKLY)); then
        keep[$snap]=1
        weekly_keep[$week_key]=$((weekly_count + 1))
      fi
    fi
  done

  for snap in "${snaps[@]}"; do
    if [[ -z "${keep[$snap]:-}" ]]; then
      btrfs subvolume delete "${base_dir}/${SNAP_SUBVOL}/$snap"
    fi
  done
}

mkdir -p "${ROOT_MNT}" "${BOOT_MNT}"

# mount and verify root
mount -U "${ROOT_UUID}" "${ROOT_MNT}"
for path in "${ROOT_SUBVOL}" "${SNAP_SUBVOL}"; do
  [[ -d "${ROOT_MNT}/${path}" ]] || {
    echo "btrfsnapshot: ${path} not found under ${ROOT_MNT}" >&2
    exit 1
  }
done

# mount and verify boot
mount -U "${BOOT_UUID}" "${BOOT_MNT}"
for path in "${BOOT_SUBVOL}" "${SNAP_SUBVOL}"; do
  [[ -d "${BOOT_MNT}/${path}" ]] || {
    echo "btrfsnapshot: ${path} not found under ${BOOT_MNT}" >&2
    exit 1
  }
done
[[ -d "${EFI_SOURCE}" ]] || {
  echo "btrfsnapshot: EFI files source ${EFI_SOURCE} not found" >&2
  exit 1
}
[[ -d "${BOOT_MNT}/${BOOT_SUBVOL}/${EFI_BACKUP_DIR}" ]] || {
  echo "btrfsnapshot: EFI backup dir ${EFI_BACKUP_DIR} not found under ${BOOT_MNT}/${BOOT_SUBVOL}" >&2
  exit 1
}

# snapshot root
PREFIX="${ROOT_SUBVOL}_btrfsnapshot"
[[ -z "$(find "${ROOT_MNT}/${SNAP_SUBVOL}" -maxdepth 1 -type d -name "${PREFIX}_*_${DATE_EPOCH}")" ]] || {
  echo "btrfsnapshot: snapshot with timestamp ${DATE_EPOCH} already exists. skipping snapshot creation." >&2
  exit 0
}
btrfs subvolume snapshot -r "${ROOT_MNT}/${ROOT_SUBVOL}" "${ROOT_MNT}/${SNAP_SUBVOL}/${PREFIX}_${DATE_NOW}_${SNAP_NAME}_${DATE_EPOCH}"
prune_snapshots "${ROOT_MNT}" "${PREFIX}"

# snapshot boot + EFI backup
PREFIX="${BOOT_SUBVOL}_btrfsnapshot"
rsync -a --delete "${EFI_SOURCE}/" "${BOOT_MNT}/${BOOT_SUBVOL}/${EFI_BACKUP_DIR}/"
btrfs subvolume snapshot -r "${BOOT_MNT}/${BOOT_SUBVOL}" "${BOOT_MNT}/${SNAP_SUBVOL}/${PREFIX}_${DATE_NOW}_${SNAP_NAME}_${DATE_EPOCH}"
prune_snapshots "${BOOT_MNT}" "${PREFIX}"
