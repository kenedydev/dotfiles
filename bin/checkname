#!/usr/bin/env python3
import sys
import os
import unicodedata
import re

STANDARD_NAMES = ["CMakeLists.txt", "LICENSE", "README", "README.md", "Dockerfile"]
STANDARD_EXTENSIONS = [".AppImage", ".FCStd", ".ms14", ".mp4", ".m2ts"]
IGNORE_EXTENSIONS = [".c", ".h", ".py"]

SEPARATOR = r'_'
VALID_CHARACTERS_NAME = r'a-z0-9'
VALID_CHARACTERS_NAME_IGNORED_EXTENSIONS = r'a-zA-Z0-9'
VALID_CHARACTERS_SEPARATOR_IGNORED_EXTENSIONS = r'_-'

PATTERN_NAME = fr'^[{VALID_CHARACTERS_NAME}]+(?:{SEPARATOR}[{VALID_CHARACTERS_NAME}]+)*$'
PATTERN_NAME_IGNORED_EXTENSIONS = fr'^[{VALID_CHARACTERS_NAME_IGNORED_EXTENSIONS}]+(?:[{VALID_CHARACTERS_SEPARATOR_IGNORED_EXTENSIONS}][{VALID_CHARACTERS_NAME_IGNORED_EXTENSIONS}]+)*$'
PATTERN_EXTENSION = r'^(\.[a-z]+)?$'

def print_help():
    """
    Display usage instructions and available options for the script.
    
    Provides detailed explanations of command-line flags and their behavior.
    """
    help_message = (
        f"Usage: {sys.argv[0]} <path> [<path> ...] [--dry-run] [--normalize-name] [--no-ignore]\n"
        "\n"
        "Options:\n"
        "  --dry-run, -d         Show the renaming actions without making changes.\n"
        "  --normalize-name, -n  Normalize file and directory names.\n"
        "  --no-ignore           Process all files, including those in ignore lists.\n"
        "  --help, -h            Display this help message.\n"
        "\n"
        "Description:\n"
        "  This script normalizes file and directory names by removing accents, converting to lowercase,\n"
        "  replacing non-alphanumeric characters with the SEPARATOR, and trimming extra separators.\n"
        "  Files and extensions in the ignore lists (e.g., CMakeLists.txt, .c, .h) are skipped unless --no-ignore\n"
        "  is specified."
    )
    print(help_message)

def normalize_name(name):
    """
    Normalize a file or directory name.

    Steps include:
    - Removing accents and diacritics.
    - Converting to lowercase.
    - Replacing non-alphanumeric characters with the SEPARATOR.
    - Trimming redundant SEPARATORS.

    :param name: The name to normalize.
    :return: The normalized name.
    """
    normalized = unicodedata.normalize('NFD', name)
    normalized = ''.join(char for char in normalized if char.isascii())
    normalized = normalized.lower()
    normalized = re.sub(fr'[^{VALID_CHARACTERS_NAME}]+', SEPARATOR, normalized)
    normalized = re.sub(fr'{SEPARATOR}+', SEPARATOR, normalized)  # Merge multiple SEPARATORS
    return normalized.strip(SEPARATOR)

def check_name(paths, no_ignore):
    """
    Validate the names of files or directories in the provided paths.

    Checks each path for compliance with naming conventions and optional ignore rules.

    :param paths: List of file or directory paths to validate.
    :param no_ignore: If True, bypass ignore rules for certain files or extensions.
    """
    for path in paths:
        name = os.path.basename(path)

        if os.path.isfile(path):
            if not no_ignore and name in STANDARD_NAMES:
                continue

            name, extension = os.path.splitext(name)

            if extension == ".asc":
                name, extension = os.path.splitext(name)

            if extension in STANDARD_EXTENSIONS or bool(re.match(PATTERN_EXTENSION, extension)):
                if bool(re.match(PATTERN_NAME, name)):
                    continue

            if not no_ignore and extension in IGNORE_EXTENSIONS:
                if bool(re.match(PATTERN_NAME_IGNORED_EXTENSIONS, name)):
                    continue

        elif bool(re.match(PATTERN_NAME, name)):
            continue

        print(f"{path}")

def rename(paths, dry_run, no_ignore):
    """
    Rename files or directories in the provided paths to normalized names if necessary.

    :param paths: List of file or directory paths to rename.
    :param dry_run: If True, only display the renaming actions without applying them.
    :param no_ignore: If True, bypass ignore rules for certain files or extensions.
    """
    for path in paths:
        directory = os.path.dirname(path)
        old_name = os.path.basename(path)

        if os.path.isfile(path):
            if not no_ignore and old_name in STANDARD_NAMES:
                continue

            name, extension = os.path.splitext(old_name)

            if extension not in STANDARD_EXTENSIONS and not bool(re.match(PATTERN_EXTENSION, extension)):
                extension = extension.lower()

            if not no_ignore and extension in IGNORE_EXTENSIONS:
                continue

            second_extension = ""
            if extension == ".asc":
                second_extension = extension
                name, extension = os.path.splitext(name)
                if extension not in STANDARD_EXTENSIONS and not bool(re.match(PATTERN_EXTENSION, extension)):
                    extension = extension.lower()

            new_name = normalize_name(name) + extension + second_extension
        else:
            new_name = normalize_name(old_name)

        if old_name != new_name:
            new_path = os.path.join(directory, new_name)
            if dry_run:
                print(f"Dry run: {path} -> {new_path}")
            else:
                if os.path.exists(new_path):
                    print(f"Error: {new_path} already exists, skipping.")
                    continue

                try:
                    os.rename(path, new_path)
                    print(f"Renamed: {path} -> {new_path}")
                except OSError as error:
                    print(f"Error renaming {path} to {new_path}: {error}")

def main():
    """
    Entry point for the script.

    Processes command-line arguments to determine the operation mode and applies 
    either renaming or validation logic to the specified paths.
    """
    if len(sys.argv) < 2:
        print(f"Run '{sys.argv[0]} --help' for usage information.")
        sys.exit(1)

    dry_run = False
    normalize_name_flag = False
    no_ignore = False
    paths = []

    for arg in sys.argv[1:]:
        if os.path.exists(arg):
            paths.append(arg)
        elif arg in ("--help", "-h"):
            print_help()
            sys.exit(0)
        elif arg in ("--dry-run", "-d"):
            dry_run = True
        elif arg in ("--normalize-name", "-n"):
            normalize_name_flag = True
        elif arg == "--no-ignore":
            no_ignore = True
        elif arg.startswith("-"):
            print(f"Error: Unrecognized option '{arg}'")
            sys.exit(1)
        else:
            print(f"Error: Invalid path: {arg}")
            sys.exit(1)

    if not paths:
        print(f"Run '{sys.argv[0]} --help' for usage information.")
        sys.exit(1)

    if normalize_name_flag or dry_run:
        rename(paths, dry_run, no_ignore)
    else:
        check_name(paths, no_ignore)

if __name__ == "__main__":
    main()

