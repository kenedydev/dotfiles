#!/usr/bin/env python3
import sys
import unicodedata
import re
from collections import namedtuple
from pathlib import Path

# Constants for standard and special file names/extensions
STANDARD_NAMES = ["CMakeLists.txt", "LICENSE", "README", "README.md", "Dockerfile"]
STANDARD_EXTENSIONS = [".AppImage", ".FCStd"]
SPECIAL_EXTENSIONS = [".c", ".h", ".py"]

# Regex patterns for name validation
SEPARATOR = r'_'
PATTERN_VALID_NAME = r'^[a-z0-9]+(?:_[a-z0-9]+)*$'
PATTERN_INVALID_CHARACTERS = r'[^a-z0-9]+'
PATTERN_EXTENDED_NAME = r'^[a-zA-Z0-9]+(?:[_-][a-zA-Z0-9]+)*$'
PATTERN_VALID_EXTENSION = r'^(\.[a-z0-9]+)?$'

# Global variable for script name
SCRIPT_NAME = Path(__file__).name

Flags = namedtuple('Flags', ['dry_run', 'ignore_special_cases', 'normalize_name'])

def display_help():
    """
    Display usage instructions and available options for the script.
    """
    help_message = (
        f"{SCRIPT_NAME}: usage: {SCRIPT_NAME} <path> [<path> ...] [--dry-run] [--normalize-name] [--ignore-special-cases]\n"
        "\noptions:\n"
        "  --dry-run, -d            show the renaming actions without making changes.\n"
        "  --normalize-name, -n     normalize file and directory names.\n"
        "  --ignore-special-cases   process all files, including special cases.\n"
        "  --help, -h               display this help message.\n"
        "\ndescription:\n"
        "  this script normalizes file and directory names by removing accents, converting to lowercase,\n"
        "  replacing non-alphanumeric characters with underscores, and trimming extra separators.\n"
        "  files and extensions in the standard or special lists are skipped unless --ignore-special-cases is specified."
    )
    print(help_message)

def matches_pattern(string, pattern):
    """
    Check if a string matches a given regex pattern.

    :param string: The string to validate.
    :param pattern: The regex pattern to match.
    :return: True if the string matches the pattern, False otherwise.
    """
    return bool(re.match(pattern, string))

def is_valid_name(path, flags):
    """
    Validate whether a file or directory name complies with naming conventions.

    :param path: File or directory path to validate.
    :param flags: Flags indicating the script behavior.
    :return: True if the name is valid, False otherwise.
    """
    if path.is_file():
        if not flags.ignore_special_cases and path.name in STANDARD_NAMES:
            return True

        if not flags.ignore_special_cases and path.suffix in SPECIAL_EXTENSIONS and matches_pattern(path.stem, PATTERN_EXTENDED_NAME):
            return True

        if (path.suffix in STANDARD_EXTENSIONS or matches_pattern(path.suffix, PATTERN_VALID_EXTENSION)) \
                and matches_pattern(path.stem, PATTERN_VALID_NAME):
            return True

        return False

    return matches_pattern(path.name, PATTERN_VALID_NAME)

def normalize_string(string):
    """
    Normalize a string by removing accents, converting to lowercase, and replacing invalid characters.

    :param string: The string to normalize.
    :return: The normalized string.
    """
    normalized = unicodedata.normalize('NFD', string)
    normalized = ''.join(char for char in normalized if char.isascii())
    normalized = normalized.lower()
    normalized = re.sub(PATTERN_INVALID_CHARACTERS, SEPARATOR, normalized)
    normalized = re.sub(fr'{SEPARATOR}+', SEPARATOR, normalized)
    return normalized.strip(SEPARATOR)

def rename_path(path, new_path, flags):
    """
    Rename a file or directory, or simulate the renaming in dry-run mode.

    :param path: Original path of the file or directory.
    :param new_path: New path after renaming.
    :param flags: Flags indicating the script behavior.
    """
    if flags.dry_run:
        print(f"{SCRIPT_NAME}: dry run: {path} -> {new_path}")
    else:
        if new_path.exists():
            print(f"{SCRIPT_NAME}: error: {new_path} already exists, skipping.")
            return

        try:
            path.rename(new_path)
            print(f"{SCRIPT_NAME}: renamed: {path} -> {new_path}")
        except Exception as error:
            print(f"{SCRIPT_NAME}: error renaming {path} to {new_path}: {error}")

def normalize_name(path, flags):
    """
    Normalize the name of a file or directory.

    :param path: Path to the file or directory.
    :param flags: Flags indicating the script behavior.
    """
    if path.is_file():
        extension = path.suffix

        if extension not in STANDARD_EXTENSIONS and not matches_pattern(extension, PATTERN_VALID_EXTENSION):
            extension = extension.lower()

        if not flags.ignore_special_cases and extension in SPECIAL_EXTENSIONS:
            print(f"{SCRIPT_NAME}: skipping special file: {path}")
            return

        new_name = normalize_string(path.stem) + extension
    else:
        new_name = normalize_string(path.name)

    rename_path(path, path.parent / new_name, flags)

class PathNode:
    def __init__(self, name):
        """
        Node structure for representing a part of the file system path.

        :param name: The name of the directory or file represented by this node.
        """
        self.name = name  # Name of the current node
        self.path = None  # Actual Path object if this node represents a path
        self.next_path_node = None  # List of child PathNode objects

    def add_next_path_node(self, path_node):
        """
        Add a child PathNode to the current node.

        :param path_node: The PathNode to add as a child.
        """
        if self.next_path_node:
            self.next_path_node.append(path_node)
        else:
            self.next_path_node = [path_node]

    def find_next_path_node(self, name):
        """
        Find or create a child PathNode with the given name.

        :param name: The name of the child node to find or create.
        :return: The existing or newly created PathNode.
        """
        if self.next_path_node:
            for path_node in self.next_path_node:
                if path_node.name == name:
                    return path_node

        new_path_node = PathNode(name)
        self.add_next_path_node(new_path_node)
        return new_path_node

def insert_into_path_tree(path_tree, path):
    """
    Insert a file or directory path into the tree structure.

    :param path_tree: The root PathNode of the tree.
    :param path: The Path object to insert.
    """
    path_absolute = path.absolute()
    path_node = path_tree

    for part in path_absolute.parts:
        path_node = path_node.find_next_path_node(part)

    path_node.path = path

def process_path_tree(path_tree, flags):
    """
    Process all paths in the tree structure, validating or normalizing as needed.

    :param path_tree: The root PathNode of the tree.
    :param flags: Flags indicating the script behavior.
    """
    if path_tree.next_path_node:
        for path in path_tree.next_path_node:
            process_path_tree(path, flags)

    if path_tree.path:
        if not is_valid_name(path_tree.path, flags):
            if flags.normalize_name:
                normalize_name(path_tree.path, flags)
            else:
                print(f"{path_tree.path}")

def main():
    """
    Entry point for the script. Process command-line arguments and apply renaming or validation.
    """
    if len(sys.argv) < 2:
        print(f"{SCRIPT_NAME}: run '{SCRIPT_NAME} --help' for usage information.")
        sys.exit(1)

    flags = Flags(dry_run=False, ignore_special_cases=False, normalize_name=False)
    path_tree = PathNode(None)

    for arg in sys.argv[1:]:
        path = Path(arg)
        if path.exists():
            insert_into_path_tree(path_tree, path)

        elif arg.startswith("-"):
            if arg in ("-d", "--dry-run"):
                flags = flags._replace(dry_run=True)

            elif arg == "--ignore-special-cases":
                flags = flags._replace(ignore_special_cases=True)

            elif arg in ("-n", "--normalize-name"):
                flags = flags._replace(normalize_name=True)

            elif arg in ("-h", "--help"):
                display_help()
                sys.exit(0)

            else:
                for flag in arg[1:]:
                    if flag == 'd':
                        flags = flags._replace(dry_run=True)

                    elif flag == 'n':
                        flags = flags._replace(normalize_name=True)

                    elif flag == 'h':
                        display_help()
                        sys.exit(0)

                    else:
                        print(f"{SCRIPT_NAME}: error: unrecognized option '{flag}'")
                        sys.exit(1)
        else:
            print(f"{SCRIPT_NAME}: error: invalid path: {path}")
            sys.exit(1)

    if not path_tree.next_path_node:
        print(f"{SCRIPT_NAME}: run '{SCRIPT_NAME} --help' for usage information.")
        sys.exit(1)

    process_path_tree(path_tree, flags)

if __name__ == "__main__":
    main()

